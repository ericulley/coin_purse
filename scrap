CREATE TABLE clients (id SERIAL, bio VARCHAR(256), email VARCHAR(50), name VARCHAR(50), password VARCHAR(256));
CREATE TABLE sessions (id SERIAL, email VARCHAR(50), password VARCHAR(256));
CREATE TABLE coins (id SERIAL, current_price DECIMAL, name VARCHAR(50), purchase_amount DECIMAL, symbol VARCHAR(6));
CREATE TABLE wallets (id SERIAL, amount_owned DECIMAL, client BIGINT, coin_id BIGINT, symbol VARCHAR(6));



{this.state.coins.map((coin) => {
    return (
        <div className="coin-cont" key={coin.id}>



            <details>
                <summary>Edit</summary>
                <form id={coin.id} onSubmit={this.updateCoin}>
                    <label htmlFor="editPurchaseAmount">Amount Owned</label>
                    <input id="editPurchaseAmount" type="number" step="0.00001" onChange={this.handleUpdateCoinChange}/>
                    <br/>
                    <input type="submit" value="Update Coin" />
                </form>
            </details>
            <button id={coin.id} onClick={this.remove}>Remove Coin</button>
        </div>
    )
})}


<p className="coin-price">{coin.currentPrice}</p>
<p className="coin-owned">{coin.amountOwned}</p>
<details>
    <summary>Edit</summary>
    <form id={coin.id} onSubmit={this.updateCoin}>
        <label htmlFor="editPurchaseAmount">Amount Owned</label>
        <input id="editPurchaseAmount" type="number" step="0.00001" onChange={this.handleUpdateCoinChange}/>
        <br/>
        <input type="submit" value="Update Coin" />
    </form>
</details>
<p>Owned Value: ${(coin.amountOwned * coin.currentPrice).toFixed(2)}</p>
<button id={coin.id} onClick={this.remove}>Remove Coin</button>



<Route path='/portfolio' exact render={props => this.state.authorized ?
    <Portfolio {...props} parentState={this.state}/> : <Redirect to="/signup" />} />
